/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Project_Panel;

import DatabaseConnection.DBConnectioncode;
import com.lowagie.text.BadElementException;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.Font;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Amin Kaiser
 */
public class Panel_Drop extends javax.swing.JPanel {
//Variaable for Database Connection
    
    Connection con;
    PreparedStatement prepstmnt = null;
    ResultSet res = null;
    
    public Panel_Drop() {
        initComponents();
        
        try {
            con = DBConnectioncode.DBConnectioncode();

        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Panel_Drop.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        try{
            String sqlSrch = "Select distinct(session) AS Session from Session ORDER BY session ASC";
            prepstmnt=con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            while(res.next())
            {
               
                String ses=res.getString("session");
               jComboSession.addItem(ses);
              
            }
           
        }catch(SQLException e)
        {
        }
    }
    
    
    public void TableRefresh()
    {
        try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                int row=jTableDrop.getRowCount();
                for(int i=row-1;i>=0;i--)
                {
                    tb.removeRow(i);
                }
                
                jCheckBox1.setSelected(false);
       
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null,e);
        }
    }
    
    
    public void Refresh()
     {
         jComboResult.setSelectedItem("Select");
         txtName.setText("");
         txtRoll.setText("");
         txtReg.setText("");
         jComboSession.setSelectedItem("Select");
         jComboSemester.setSelectedItem("Select");
         txtCGPA.setText("");
         jCheckBox1.setSelected(false);
         
     }
    
    public void ComboactionRefresh()
    {
         txtName.setText("");
         txtRoll.setText("");
         txtReg.setText("");
         jComboSession.setSelectedItem("Select");
         jComboSemester.setSelectedItem("Select");
         txtCGPA.setText("");
         jCheckBox1.setSelected(false); 
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel123 = new javax.swing.JPanel();
        jLabel122 = new javax.swing.JLabel();
        jLabel123 = new javax.swing.JLabel();
        jLabel124 = new javax.swing.JLabel();
        jLabel125 = new javax.swing.JLabel();
        jLabel143 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtRoll = new javax.swing.JTextField();
        txtReg = new javax.swing.JTextField();
        jComboSemester = new javax.swing.JComboBox();
        jComboSession = new javax.swing.JComboBox();
        jLabel144 = new javax.swing.JLabel();
        txtCGPA = new javax.swing.JTextField();
        jPanel41 = new javax.swing.JPanel();
        jLabel146 = new javax.swing.JLabel();
        jComboResult = new javax.swing.JComboBox();
        jPanel126 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTableDrop = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel89 = new javax.swing.JPanel();
        jButton106 = new javax.swing.JButton();
        jButton107 = new javax.swing.JButton();
        jButtonUPDATE = new javax.swing.JButton();
        jButton117 = new javax.swing.JButton();
        jButton118 = new javax.swing.JButton();
        jButton119 = new javax.swing.JButton();
        jLabel145 = new javax.swing.JLabel();
        jComboBoxPromotion = new javax.swing.JComboBox<>();
        jComboBoxDrop = new javax.swing.JComboBox<>();

        jPanel123.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel122.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel122.setText("Name :");

        jLabel123.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel123.setText("Roll :");

        jLabel124.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel124.setText("Reg. No :");

        jLabel125.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel125.setText("Session :");

        jLabel143.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel143.setText("CGPA :");

        txtName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        txtRoll.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        txtReg.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jComboSemester.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboSemester.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "1st Semester", "2nd Semester", "3rd Semester", "4th Semester", "5th Semester", "6th Semester", "7th Semester", "8th Semester", "EX- Semester" }));

        jComboSession.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboSession.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select" }));

        jLabel144.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel144.setText("Semester :");

        txtCGPA.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        javax.swing.GroupLayout jPanel123Layout = new javax.swing.GroupLayout(jPanel123);
        jPanel123.setLayout(jPanel123Layout);
        jPanel123Layout.setHorizontalGroup(
            jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel123Layout.createSequentialGroup()
                .addGroup(jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel123Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel143, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtCGPA, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel123Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel123Layout.createSequentialGroup()
                                .addComponent(jLabel122, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel123Layout.createSequentialGroup()
                                .addComponent(jLabel123, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(txtRoll, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel123Layout.createSequentialGroup()
                                .addComponent(jLabel124, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(txtReg, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel123Layout.createSequentialGroup()
                                .addComponent(jLabel125, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jComboSession, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel123Layout.createSequentialGroup()
                                .addComponent(jLabel144, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(jComboSemester, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel123Layout.setVerticalGroup(
            jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel123Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel122, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel123, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRoll, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel124, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel125, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboSession, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel144, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel123Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel143, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCGPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel146.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel146.setText("Select Semester :");

        jComboResult.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jComboResult.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "1st Semester", "2nd Semester", "3rd Semester", "4th Semester", "5th Semester", "6th Semester", "7th Semester", "8th Semester" }));
        jComboResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel41Layout = new javax.swing.GroupLayout(jPanel41);
        jPanel41.setLayout(jPanel41Layout);
        jPanel41Layout.setHorizontalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel41Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel146, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboResult, 0, 204, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel41Layout.setVerticalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel41Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel146, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel126.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTableDrop.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "   Select", "   Name", "   Roll ", "   Reg. No", "   Session ", "   Semester  ", "   CGPA "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableDrop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableDropMouseClicked(evt);
            }
        });
        jTableDrop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableDropKeyReleased(evt);
            }
        });
        jScrollPane19.setViewportView(jTableDrop);

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox1.setText("Select All");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel126Layout = new javax.swing.GroupLayout(jPanel126);
        jPanel126.setLayout(jPanel126Layout);
        jPanel126Layout.setHorizontalGroup(
            jPanel126Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel126Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel126Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel126Layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel126Layout.setVerticalGroup(
            jPanel126Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel126Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox1)
                .addContainerGap())
        );

        jPanel89.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton106.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton106.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project_Panel/save2.png"))); // NOI18N
        jButton106.setText("Save");
        jButton106.setEnabled(false);

        jButton107.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton107.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project_Panel/Trash-can16.png"))); // NOI18N
        jButton107.setText("Delete");
        jButton107.setEnabled(false);
        jButton107.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton107ActionPerformed(evt);
            }
        });

        jButtonUPDATE.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonUPDATE.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project_Panel/Update.png"))); // NOI18N
        jButtonUPDATE.setText("Update");
        jButtonUPDATE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUPDATEActionPerformed(evt);
            }
        });

        jButton117.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton117.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project_Panel/Print.png"))); // NOI18N
        jButton117.setText("Print");
        jButton117.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton117ActionPerformed(evt);
            }
        });

        jButton118.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton118.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project_Panel/refresh.png"))); // NOI18N
        jButton118.setText("Refresh");
        jButton118.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton118ActionPerformed(evt);
            }
        });

        jButton119.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton119.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Project_Panel/view.gif"))); // NOI18N
        jButton119.setText("Preview");
        jButton119.setEnabled(false);

        javax.swing.GroupLayout jPanel89Layout = new javax.swing.GroupLayout(jPanel89);
        jPanel89.setLayout(jPanel89Layout);
        jPanel89Layout.setHorizontalGroup(
            jPanel89Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel89Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton119)
                .addGap(26, 26, 26)
                .addComponent(jButton117, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton118)
                .addContainerGap())
            .addGroup(jPanel89Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton106, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton107)
                .addGap(18, 18, 18)
                .addComponent(jButtonUPDATE)
                .addGap(22, 22, 22))
        );
        jPanel89Layout.setVerticalGroup(
            jPanel89Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel89Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel89Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton106, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton107, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonUPDATE, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel89Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton117, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton118, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton119, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel145.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel145.setText("Selected Student Send to :");

        jComboBoxPromotion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxPromotion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Promotion To", "2nd Semester", "3rd Semester", "4th Semester", "5th Semester", "6th Semester", "7th Semester", "8th Semester", "Passed From Institute" }));
        jComboBoxPromotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPromotionActionPerformed(evt);
            }
        });

        jComboBoxDrop.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxDrop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Drop Out To", "1st Semester", "2nd Semester", "3rd Semester", "4th Semester", "5th Semester", "6th Semester", "7th Semester", "8th Semster" }));
        jComboBoxDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDropActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel123, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel89, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel126, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(401, 401, 401)
                .addComponent(jLabel145)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxPromotion, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jComboBoxDrop, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(265, 265, 265))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(jPanel123, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel89, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel126, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jLabel145, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxPromotion, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                    .addComponent(jComboBoxDrop, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addContainerGap(57, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboResultActionPerformed
        Object Result = jComboResult.getSelectedItem();
        
        if("1st Semester"==Result)
        {
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  first_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
            TableRefresh();
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  first_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
             
            
        }
        
        
        if("2nd Semester"==Result)
        {
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  second_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
            TableRefresh();
            
            
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  second_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        }
        
        
        if ("3rd Semester" == Result) {
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  third_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            TableRefresh();
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  third_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }    
        
        
        if ("4th Semester" == Result) {
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  fourth_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            TableRefresh();
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  fourth_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }    
        
        
        if ("5th Semester" == Result) {
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  fifth_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            TableRefresh();
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  fifth_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }  
        
        
        if ("6th Semester" == Result) {
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  sixth_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            TableRefresh();
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  sixth_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }  
        
        
        if ("7th Semester" == Result) {
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  seventh_semster_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            TableRefresh();
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  seventh_semster_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }  
        
        
        if ("8th Semester" == Result) {
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  eighth_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            TableRefresh();
            try {
                DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  eighth_semester_drop";

                prepstmnt = con.prepareStatement(sqlSrch);
                res = prepstmnt.executeQuery();

                while (res.next()) {
                    String Name = res.getString("name");
                    String roll = res.getString("roll");
                    String reg = res.getString("reg");
                    String session = res.getString("session");
                    String semester = res.getString("semester");
                    String cgpa = res.getString("cgpa");

                    tb.addRow(new Object[]{false, Name, roll, reg, session, semester, cgpa});

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }
        }  
            
        
    }//GEN-LAST:event_jComboResultActionPerformed

    private void jTableDropMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableDropMouseClicked
        // TODO add your handling code here:
        
        Object Result = jComboResult.getSelectedItem();
        
        if(Result == "1st Semester")
        {
         
        try{
           
            int row = jTableDrop.getSelectedRow();
            String Table_Click = (jTableDrop.getModel().getValueAt(row, 2).toString());
            String sqlSearch = "SELECT * FROM first_semester_drop WHERE roll ='"+Table_Click+"'";
            prepstmnt = con.prepareStatement(sqlSearch);
            res = prepstmnt.executeQuery();
          
            while(res.next())
            {
                String Name = res.getString("name");
                String roll = res.getString("roll");
                String reg = res.getString("reg");
                String session = res.getString("session");
                String semester = res.getString("semester");
                String cgpa =res.getString("cgpa");
                
                
                txtName.setText(Name);
                txtRoll.setText(roll);
                txtReg.setText(reg);
                jComboSession.setSelectedItem(session);
                jComboSemester.setSelectedItem(semester);
                txtCGPA.setText(cgpa);
                
               
            }
           
           
       }catch(Exception e)
       {
           JOptionPane.showMessageDialog(null,e);
       }
        
        }
        
        
        if(Result == "2nd Semester")
        {
            
        try{
           
            int row = jTableDrop.getSelectedRow();
            String Table_Click = (jTableDrop.getModel().getValueAt(row, 2).toString());
            String sqlSearch = "SELECT * FROM second_semester_drop WHERE roll ='"+Table_Click+"'";
            prepstmnt = con.prepareStatement(sqlSearch);
            res = prepstmnt.executeQuery();
          
            while(res.next())
            {
                String Name = res.getString("name");
                String roll = res.getString("roll");
                String reg = res.getString("reg");
                String session = res.getString("session");
                String semester = res.getString("semester");
                String cgpa =res.getString("cgpa");
                
                
                txtName.setText(Name);
                txtRoll.setText(roll);
                txtReg.setText(reg);
                jComboSession.setSelectedItem(session);
                jComboSemester.setSelectedItem(semester);
                txtCGPA.setText(cgpa);
                
               
            }
           
           
       }catch(Exception e)
       {
           JOptionPane.showMessageDialog(null,e);
       }
        
        }
        
        
        
        
        if(Result == "3rd Semester")
        {
            
        try{
           
            int row = jTableDrop.getSelectedRow();
            String Table_Click = (jTableDrop.getModel().getValueAt(row, 2).toString());
            String sqlSearch = "SELECT * FROM third_semester_drop WHERE roll ='"+Table_Click+"'";
            prepstmnt = con.prepareStatement(sqlSearch);
            res = prepstmnt.executeQuery();
          
            while(res.next())
            {
                String Name = res.getString("name");
                String roll = res.getString("roll");
                String reg = res.getString("reg");
                String session = res.getString("session");
                String semester = res.getString("semester");
                String cgpa =res.getString("cgpa");
                
                
                txtName.setText(Name);
                txtRoll.setText(roll);
                txtReg.setText(reg);
                jComboSession.setSelectedItem(session);
                jComboSemester.setSelectedItem(semester);
                txtCGPA.setText(cgpa);
                
               
            }
           
           
       }catch(Exception e)
       {
           JOptionPane.showMessageDialog(null,e);
       }
        
        }
        
        
        if(Result == "4th Semester")
        {
            
        try{
           
            int row = jTableDrop.getSelectedRow();
            String Table_Click = (jTableDrop.getModel().getValueAt(row, 2).toString());
            String sqlSearch = "SELECT * FROM fourth_semester_drop WHERE roll ='"+Table_Click+"'";
            prepstmnt = con.prepareStatement(sqlSearch);
            res = prepstmnt.executeQuery();
          
            while(res.next())
            {
                String Name = res.getString("name");
                String roll = res.getString("roll");
                String reg = res.getString("reg");
                String session = res.getString("session");
                String semester = res.getString("semester");
                String cgpa =res.getString("cgpa");
                
                
                txtName.setText(Name);
                txtRoll.setText(roll);
                txtReg.setText(reg);
                jComboSession.setSelectedItem(session);
                jComboSemester.setSelectedItem(semester);
                txtCGPA.setText(cgpa);
                
               
            }
           
           
       }catch(Exception e)
       {
           JOptionPane.showMessageDialog(null,e);
       }
        
        }
        
        if(Result == "5th Semester")
        {
            
        try{
           
            int row = jTableDrop.getSelectedRow();
            String Table_Click = (jTableDrop.getModel().getValueAt(row, 2).toString());
            String sqlSearch = "SELECT * FROM fifth_semester_drop WHERE roll ='"+Table_Click+"'";
            prepstmnt = con.prepareStatement(sqlSearch);
            res = prepstmnt.executeQuery();
          
            while(res.next())
            {
                String Name = res.getString("name");
                String roll = res.getString("roll");
                String reg = res.getString("reg");
                String session = res.getString("session");
                String semester = res.getString("semester");
                String cgpa =res.getString("cgpa");
                
                
                txtName.setText(Name);
                txtRoll.setText(roll);
                txtReg.setText(reg);
                jComboSession.setSelectedItem(session);
                jComboSemester.setSelectedItem(semester);
                txtCGPA.setText(cgpa);
                
               
            }
           
           
       }catch(Exception e)
       {
           JOptionPane.showMessageDialog(null,e);
       }
        
        }
        
        
        if(Result == "6th Semester")
        {
            
        try{
           
            int row = jTableDrop.getSelectedRow();
            String Table_Click = (jTableDrop.getModel().getValueAt(row, 2).toString());
            String sqlSearch = "SELECT * FROM sixth_semester_drop WHERE roll ='"+Table_Click+"'";
            prepstmnt = con.prepareStatement(sqlSearch);
            res = prepstmnt.executeQuery();
          
            while(res.next())
            {
                String Name = res.getString("name");
                String roll = res.getString("roll");
                String reg = res.getString("reg");
                String session = res.getString("session");
                String semester = res.getString("semester");
                String cgpa =res.getString("cgpa");
                
                
                txtName.setText(Name);
                txtRoll.setText(roll);
                txtReg.setText(reg);
                jComboSession.setSelectedItem(session);
                jComboSemester.setSelectedItem(semester);
                txtCGPA.setText(cgpa);
                
               
            }
           
           
       }catch(Exception e)
       {
           JOptionPane.showMessageDialog(null,e);
       }
        
        }
        
        if(Result == "7th Semester")
        {
            
        try{
           
            int row = jTableDrop.getSelectedRow();
            String Table_Click = (jTableDrop.getModel().getValueAt(row, 2).toString());
            String sqlSearch = "SELECT * FROM seventh_semster_drop WHERE roll ='"+Table_Click+"'";
            prepstmnt = con.prepareStatement(sqlSearch);
            res = prepstmnt.executeQuery();
          
            while(res.next())
            {
                String Name = res.getString("name");
                String roll = res.getString("roll");
                String reg = res.getString("reg");
                String session = res.getString("session");
                String semester = res.getString("semester");
                String cgpa =res.getString("cgpa");
                
                
                txtName.setText(Name);
                txtRoll.setText(roll);
                txtReg.setText(reg);
                jComboSession.setSelectedItem(session);
                jComboSemester.setSelectedItem(semester);
                txtCGPA.setText(cgpa);
                
               
            }
           
           
       }catch(Exception e)
       {
           JOptionPane.showMessageDialog(null,e);
       }
        
        }
        
        if(Result == "8th Semester")
        {
            
        try{
           
            int row = jTableDrop.getSelectedRow();
            String Table_Click = (jTableDrop.getModel().getValueAt(row, 2).toString());
            String sqlSearch = "SELECT * FROM eighth_semester_drop WHERE roll ='"+Table_Click+"'";
            prepstmnt = con.prepareStatement(sqlSearch);
            res = prepstmnt.executeQuery();
          
            while(res.next())
            {
                String Name = res.getString("name");
                String roll = res.getString("roll");
                String reg = res.getString("reg");
                String session = res.getString("session");
                String semester = res.getString("semester");
                String cgpa =res.getString("cgpa");
                
                
                txtName.setText(Name);
                txtRoll.setText(roll);
                txtReg.setText(reg);
                jComboSession.setSelectedItem(session);
                jComboSemester.setSelectedItem(semester);
                txtCGPA.setText(cgpa);
                
               
            }
           
           
       }catch(Exception e)
       {
           JOptionPane.showMessageDialog(null,e);
       }
        
        }
    }//GEN-LAST:event_jTableDropMouseClicked

    private void jTableDropKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableDropKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableDropKeyReleased

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        
        
        DefaultTableModel tbmodel = (DefaultTableModel) jTableDrop.getModel();
        if(jCheckBox1.isSelected()==true)
        {
            try{
                for (int i = 0; i < tbmodel.getRowCount(); i++) {
                
           jTableDrop.getModel().setValueAt(true, i, 0);
                }}catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }
        
        if(jCheckBox1.isSelected()==false)
        {
            try{
                for (int i = 0; i < tbmodel.getRowCount(); i++) {
                
           jTableDrop.getModel().setValueAt(false, i, 0);
                }}catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }
        
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButtonUPDATEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUPDATEActionPerformed
        Object UpdateResult = jComboResult.getSelectedItem();
        
        if(UpdateResult=="1st Semester")
        {
        
        
        try
        {
             String sqlQry="UPDATE first_semester_result SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       prepstmnt.executeUpdate();
                       
                       
            
        }catch(SQLException e){
          JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
             String sqlQry="UPDATE first_semester_drop SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       int i= prepstmnt.executeUpdate();
                       
                       if(i>0){
                           JOptionPane.showMessageDialog(this, "DATABAE UPDATED");
                       }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        TableRefresh();
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  first_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }
        
        
        
        if(UpdateResult=="2nd Semester")
        {
        
        
        try
        {
             String sqlQry="UPDATE second_semester_result SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       prepstmnt.executeUpdate();
                       
                       
            
        }catch(SQLException e){
          JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
             String sqlQry="UPDATE second_semester_drop SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       int i= prepstmnt.executeUpdate();
                       
                       if(i>0){
                           JOptionPane.showMessageDialog(this, "DATABAE UPDATED");
                       }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        TableRefresh();
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  second_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }
        
        
        if(UpdateResult=="3rd Semester")
        {
        
        
        try
        {
             String sqlQry="UPDATE third_semester_result SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       prepstmnt.executeUpdate();
                       
                       
            
        }catch(SQLException e){
          JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
             String sqlQry="UPDATE third_semester_drop SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       int i= prepstmnt.executeUpdate();
                       
                       if(i>0){
                           JOptionPane.showMessageDialog(this, "DATABAE UPDATED");
                       }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        TableRefresh();
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  third_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }

        
        if(UpdateResult=="4th Semester")
        {
        
        
        try
        {
             String sqlQry="UPDATE fourth_semester_result SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       prepstmnt.executeUpdate();
                       
                       
            
        }catch(SQLException e){
          JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
             String sqlQry="UPDATE  fourth_semester_drop SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       int i= prepstmnt.executeUpdate();
                       
                       if(i>0){
                           JOptionPane.showMessageDialog(this, "DATABAE UPDATED");
                       }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        TableRefresh();
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  fourth_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }
        
        
        if(UpdateResult=="5th Semester")
        {
        
        
        try
        {
             String sqlQry="UPDATE fifth_semester_result SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       prepstmnt.executeUpdate();
                       
                       
            
        }catch(SQLException e){
          JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
             String sqlQry="UPDATE  fifth_semester_drop SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       int i= prepstmnt.executeUpdate();
                       
                       if(i>0){
                           JOptionPane.showMessageDialog(this, "DATABAE UPDATED");
                       }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        TableRefresh();
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  fifth_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }


        
        if(UpdateResult=="6th Semester")
        {
        
        
        try
        {
             String sqlQry="UPDATE sixth_semester_result SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       prepstmnt.executeUpdate();
                       
                       
            
        }catch(SQLException e){
          JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
             String sqlQry="UPDATE  sixth_semester_drop SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       int i= prepstmnt.executeUpdate();
                       
                       if(i>0){
                           JOptionPane.showMessageDialog(this, "DATABAE UPDATED");
                       }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        TableRefresh();
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  sixth_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }
        
        
        
        if(UpdateResult=="7th Semester")
        {
        
        
        try
        {
             String sqlQry="UPDATE seventh_semster_result SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       prepstmnt.executeUpdate();
                       
                       
            
        }catch(SQLException e){
          JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
             String sqlQry="UPDATE  seventh_semster_drop SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       int i= prepstmnt.executeUpdate();
                       
                       if(i>0){
                           JOptionPane.showMessageDialog(this, "DATABAE UPDATED");
                       }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        TableRefresh();
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  seventh_semster_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }

         
        if(UpdateResult=="8th Semester")
        {
        
        
        try
        {
             String sqlQry="UPDATE eighth_semester_result SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       prepstmnt.executeUpdate();
                       
                       
            
        }catch(SQLException e){
          JOptionPane.showMessageDialog(null, e);
        }
        
        try
        {
             String sqlQry="UPDATE  eighth_semester_drop SET cgpa=? WHERE roll ='"+txtRoll.getText()+"'";
            
            prepstmnt = con.prepareStatement(sqlQry);

                        
                        prepstmnt.setString(1, txtCGPA.getText());
                        
                        
                       
                       int i= prepstmnt.executeUpdate();
                       
                       if(i>0){
                           JOptionPane.showMessageDialog(this, "DATABAE UPDATED");
                       }
            
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null, e);
        }
        
        
        TableRefresh();
            try{
                DefaultTableModel tb = (DefaultTableModel)jTableDrop.getModel();
                String sqlSrch = "SELECT * FROM  eighth_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
        }

        
    }//GEN-LAST:event_jButtonUPDATEActionPerformed

    private void jComboBoxPromotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPromotionActionPerformed
        DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
        Object Promote = jComboBoxPromotion.getSelectedItem();
        
        if(Promote=="2nd Semester")
        {
            try{
                
                String value = "2nd Semester";
                for (int i = 0; i < tb.getRowCount(); i++){
                    if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                    
                String Update = "UPDATE  student_information SET Stu_semester='"+value+"' WHERE Stu_Roll='"+tb.getValueAt(i, 2).toString()+"'";
                PreparedStatement prepStmtd = con.prepareStatement(Update);
           
             
         prepStmtd.execute();
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Successfully Promoted");
                
            }catch(SQLException | HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
         
            
            
         try{
             
         for (int i = 0; i < tb.getRowCount(); i++){
             
             if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                 
         String sqlDelete = "DELETE from first_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
             }
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code
         
         
          TableRefresh();
            try{
                
                String sqlSrch = "SELECT * FROM  first_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            

            
        }
        
        
        
        if(Promote=="3rd Semester")
        {
            try{
                
                String value = "3rd Semester";
                for (int i = 0; i < tb.getRowCount(); i++){
                    if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                    
                String Update = "UPDATE  student_information SET Stu_semester='"+value+"' WHERE Stu_Roll='"+tb.getValueAt(i, 2).toString()+"'";
                PreparedStatement prepStmtd = con.prepareStatement(Update);
           
             
         prepStmtd.execute();
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Successfully Promoted");
                
            }catch(SQLException | HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        
            
            
             try{
             
         for (int i = 0; i < tb.getRowCount(); i++){
             if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                 
         String sqlDelete = "DELETE from second_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
             }
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code
         
         
          TableRefresh();
            try{
                
                String sqlSrch = "SELECT * FROM  second_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
            
        }
        
        if(Promote=="4th Semester")
        {
            
               try{
                
                String value = "4th Semester";
                for (int i = 0; i < tb.getRowCount(); i++){
                    if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                    
                String Update = "UPDATE  student_information SET Stu_semester='"+value+"' WHERE Stu_Roll='"+tb.getValueAt(i, 2).toString()+"'";
                PreparedStatement prepStmtd = con.prepareStatement(Update);
           
           
             
         prepStmtd.execute();
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Successfully Promoted");
                
            }catch(SQLException | HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        
            
            
             try{
             
         for (int i = 0; i < tb.getRowCount(); i++){
             if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                 
         String sqlDelete = "DELETE from third_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
             }
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code
         
         
          TableRefresh();
            try{
                
                String sqlSrch = "SELECT * FROM  third_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
            
        }
        
        if(Promote=="5th Semester")
        {
            
               try{
                
                String value = "5th Semester";
                for (int i = 0; i < tb.getRowCount(); i++){
                    if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                    
                String Update = "UPDATE  student_information SET Stu_semester='"+value+"' WHERE Stu_Roll='"+tb.getValueAt(i, 2).toString()+"'";
                PreparedStatement prepStmtd = con.prepareStatement(Update);
           
           
           
             
         prepStmtd.execute();
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Successfully Promoted");
                
            }catch(SQLException | HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        
            
            
             try{
             
         for (int i = 0; i < tb.getRowCount(); i++){
             if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                 
         String sqlDelete = "DELETE from fourth_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
             }
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code
         
         
          TableRefresh();
            try{
                
                String sqlSrch = "SELECT * FROM  fourth_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
            
        }
        
        if(Promote=="6th Semester")
        {
            
               try{
                
                String value = "6th Semester";
                for (int i = 0; i < tb.getRowCount(); i++){
                    if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                    
                String Update = "UPDATE  student_information SET Stu_semester='"+value+"' WHERE Stu_Roll='"+tb.getValueAt(i, 2).toString()+"'";
                PreparedStatement prepStmtd = con.prepareStatement(Update);
           
           
           
             
         prepStmtd.execute();
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Successfully Promoted");
                
            }catch(SQLException | HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        
            
            
             try{
             
         for (int i = 0; i < tb.getRowCount(); i++){
             if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                 
         String sqlDelete = "DELETE from fifth_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
             }
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code
         
         
          TableRefresh();
            try{
                
                String sqlSrch = "SELECT * FROM  fifth_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
            
        }
        
        
        if(Promote=="7th Semester")
        {
            
               try{
                
                
                String value = "7th Semester";
                for (int i = 0; i < tb.getRowCount(); i++){
                    if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                    
                String Update = "UPDATE  student_information SET Stu_semester='"+value+"' WHERE Stu_Roll='"+tb.getValueAt(i, 2).toString()+"'";
                PreparedStatement prepStmtd = con.prepareStatement(Update);
           
           
           
             
         prepStmtd.execute();
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Successfully Promoted");
                
            }catch(SQLException | HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        
            
            
             try{
             
         for (int i = 0; i < tb.getRowCount(); i++){
             if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                 
         String sqlDelete = "DELETE from sixth_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
             }
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code
         
         
          TableRefresh();
            try{
                
                String sqlSrch = "SELECT * FROM  sixth_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
            
        }
        
        
        if(Promote=="8th Semester")
        {
            
               try{
                
                
               String value = "8th Semester";
                for (int i = 0; i < tb.getRowCount(); i++){
                    if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                    
                String Update = "UPDATE  student_information SET Stu_semester='"+value+"' WHERE Stu_Roll='"+tb.getValueAt(i, 2).toString()+"'";
                PreparedStatement prepStmtd = con.prepareStatement(Update);
           
           
           
           
             
         prepStmtd.execute();
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Successfully Promoted");
                
            }catch(SQLException | HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        
            
            
             try{
             
         for (int i = 0; i < tb.getRowCount(); i++){
             if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                 
         String sqlDelete = "DELETE from seventh_semster_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
             }
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code
         
         
          TableRefresh();
            try{
                
                String sqlSrch = "SELECT * FROM  seventh_semster_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
            
        }
        
        if(Promote=="Passed From Institute")
        {
            
               try{
                
                
               String value = "EX- Semester";
                for (int i = 0; i < tb.getRowCount(); i++){
                    if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                    
                String Update = "UPDATE  student_information SET Stu_semester='"+value+"' WHERE Stu_Roll='"+tb.getValueAt(i, 2).toString()+"'";
                PreparedStatement prepStmtd = con.prepareStatement(Update);
           
           
           
           
             
         prepStmtd.execute();
                    }
                }
                
                JOptionPane.showMessageDialog(null, "Successfully Promoted");
                
            }catch(SQLException | HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
        
            
            
             try{
             
         for (int i = 0; i < tb.getRowCount(); i++){
             if ((tb.getValueAt(i, 0).toString().equals("true"))) {
                 
         String sqlDelete = "DELETE from  eighth_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
             }
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code
         
         
          TableRefresh();
            try{
                
                String sqlSrch = "SELECT * FROM   eighth_semester_drop";
            
                     prepstmnt = con.prepareStatement(sqlSrch);
                     res = prepstmnt.executeQuery();
            
                    while(res.next())
                    {
                        String Name = res.getString("name");
                        String roll = res.getString("roll");
                        String reg = res.getString("reg");
                        String session = res.getString("session");
                        String semester = res.getString("semester");
                        String cgpa = res.getString("cgpa");

                        tb.addRow(new Object[]{false,Name,roll,reg,session,semester,cgpa});

                    }
                
            }catch(Exception e)
            {
                JOptionPane.showMessageDialog(null, e);
            }
            
            
        }
        
    }//GEN-LAST:event_jComboBoxPromotionActionPerformed

    private void jComboBoxDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDropActionPerformed
        // TODO add your handling code here:
        
        
        DefaultTableModel tb = (DefaultTableModel) jTableDrop.getModel();
        Object Drop = jComboBoxDrop.getSelectedItem();
        
        if("1st Semester"==Drop)
        {
          
            //////////////////start of delete code
         try{
         for (int i = 0; i < tb.getRowCount(); i++){
                 
         String sqlDelete = "DELETE from first_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code



            try {
            String sqlQry = "INSERT INTO first_semester_drop(promotestatus,name,roll,reg,session,semester,cgpa) VALUES(?,?,?,?,?,?,?)";
            PreparedStatement prepStmts = con.prepareStatement(sqlQry);

            for (int i = 0; i < tb.getRowCount(); i++) {

                
 
                
                if ((tb.getValueAt(i, 0).toString().equals("true"))) { //start if condition
                
                    prepStmts.setString(1, tb.getValueAt(i, 0).toString());
                    prepStmts.setString(2, tb.getValueAt(i, 1).toString());
                    prepStmts.setString(3, tb.getValueAt(i, 2).toString());
                    prepStmts.setString(4, tb.getValueAt(i, 3).toString());
                    prepStmts.setString(5, tb.getValueAt(i, 4).toString());
                    prepStmts.setString(6, tb.getValueAt(i, 5).toString());
                    prepStmts.setString(7, tb.getValueAt(i, 6).toString());

                    prepStmts.execute();

                }

            }
            JOptionPane.showMessageDialog(this, "Dropped!!!");

        } catch (SQLException | HeadlessException e) {
          JOptionPane.showMessageDialog(null, e);
        }
            
         TableRefresh();
        }
        
        
        if("2nd Semester"==Drop)
        {
          
            //////////////////start of delete code
         try{
         for (int i = 0; i < tb.getRowCount(); i++){
                 
         String sqlDelete = "DELETE from second_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code



            try {
            String sqlQry = "INSERT INTO second_semester_drop(promotestatus,name,roll,reg,session,semester,cgpa) VALUES(?,?,?,?,?,?,?)";
            PreparedStatement prepStmts = con.prepareStatement(sqlQry);

            for (int i = 0; i < tb.getRowCount(); i++) {

                
 
                
                if ((tb.getValueAt(i, 0).toString().equals("true"))) { //start if condition
                
                    prepStmts.setString(1, tb.getValueAt(i, 0).toString());
                    prepStmts.setString(2, tb.getValueAt(i, 1).toString());
                    prepStmts.setString(3, tb.getValueAt(i, 2).toString());
                    prepStmts.setString(4, tb.getValueAt(i, 3).toString());
                    prepStmts.setString(5, tb.getValueAt(i, 4).toString());
                    prepStmts.setString(6, tb.getValueAt(i, 5).toString());
                    prepStmts.setString(7, tb.getValueAt(i, 6).toString());

                    prepStmts.execute();

                }

            }
            JOptionPane.showMessageDialog(this, "Dropped!!!");

        } catch (SQLException | HeadlessException e) {
          JOptionPane.showMessageDialog(null, e);
        }
            
         TableRefresh();
        }
        
        
        if("3rd Semester"==Drop)
        {
          
            //////////////////start of delete code
         try{
         for (int i = 0; i < tb.getRowCount(); i++){
                 
         String sqlDelete = "DELETE from third_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code



            try {
            String sqlQry = "INSERT INTO third_semester_drop(promotestatus,name,roll,reg,session,semester,cgpa) VALUES(?,?,?,?,?,?,?)";
            PreparedStatement prepStmts = con.prepareStatement(sqlQry);

            for (int i = 0; i < tb.getRowCount(); i++) {

                
 
                
                if ((tb.getValueAt(i, 0).toString().equals("true"))) { //start if condition
                
                    prepStmts.setString(1, tb.getValueAt(i, 0).toString());
                    prepStmts.setString(2, tb.getValueAt(i, 1).toString());
                    prepStmts.setString(3, tb.getValueAt(i, 2).toString());
                    prepStmts.setString(4, tb.getValueAt(i, 3).toString());
                    prepStmts.setString(5, tb.getValueAt(i, 4).toString());
                    prepStmts.setString(6, tb.getValueAt(i, 5).toString());
                    prepStmts.setString(7, tb.getValueAt(i, 6).toString());

                    prepStmts.execute();

                }

            }
            JOptionPane.showMessageDialog(this, "Dropped!!!");

        } catch (SQLException | HeadlessException e) {
          JOptionPane.showMessageDialog(null, e);
        }
            
         TableRefresh();
        }
        
        
        if("4th Semester"==Drop)
        {
          
            //////////////////start of delete code
         try{
         for (int i = 0; i < tb.getRowCount(); i++){
                 
         String sqlDelete = "DELETE from fourth_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code



            try {
            String sqlQry = "INSERT INTO fourth_semester_drop(promotestatus,name,roll,reg,session,semester,cgpa) VALUES(?,?,?,?,?,?,?)";
            PreparedStatement prepStmts = con.prepareStatement(sqlQry);

            for (int i = 0; i < tb.getRowCount(); i++) {

                
 
                
                if ((tb.getValueAt(i, 0).toString().equals("true"))) { //start if condition
                
                    prepStmts.setString(1, tb.getValueAt(i, 0).toString());
                    prepStmts.setString(2, tb.getValueAt(i, 1).toString());
                    prepStmts.setString(3, tb.getValueAt(i, 2).toString());
                    prepStmts.setString(4, tb.getValueAt(i, 3).toString());
                    prepStmts.setString(5, tb.getValueAt(i, 4).toString());
                    prepStmts.setString(6, tb.getValueAt(i, 5).toString());
                    prepStmts.setString(7, tb.getValueAt(i, 6).toString());

                    prepStmts.execute();

                }

            }
            JOptionPane.showMessageDialog(this, "Dropped!!!");

        } catch (SQLException | HeadlessException e) {
          JOptionPane.showMessageDialog(null, e);
        }
            
         TableRefresh();
        }
        
        
        
        if("5th Semester"==Drop)
        {
          
            //////////////////start of delete code
         try{
         for (int i = 0; i < tb.getRowCount(); i++){
                 
         String sqlDelete = "DELETE from fifth_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code



            try {
            String sqlQry = "INSERT INTO fifth_semester_drop(promotestatus,name,roll,reg,session,semester,cgpa) VALUES(?,?,?,?,?,?,?)";
            PreparedStatement prepStmts = con.prepareStatement(sqlQry);

            for (int i = 0; i < tb.getRowCount(); i++) {

                
 
                
                if ((tb.getValueAt(i, 0).toString().equals("true"))) { //start if condition
                
                    prepStmts.setString(1, tb.getValueAt(i, 0).toString());
                    prepStmts.setString(2, tb.getValueAt(i, 1).toString());
                    prepStmts.setString(3, tb.getValueAt(i, 2).toString());
                    prepStmts.setString(4, tb.getValueAt(i, 3).toString());
                    prepStmts.setString(5, tb.getValueAt(i, 4).toString());
                    prepStmts.setString(6, tb.getValueAt(i, 5).toString());
                    prepStmts.setString(7, tb.getValueAt(i, 6).toString());

                    prepStmts.execute();

                }

            }
            JOptionPane.showMessageDialog(this, "Dropped!!!");

        } catch (SQLException | HeadlessException e) {
          JOptionPane.showMessageDialog(null, e);
        }
            
         TableRefresh();
        }
        
        
        if("6th Semester"==Drop)
        {
          
            //////////////////start of delete code
         try{
         for (int i = 0; i < tb.getRowCount(); i++){
                 
         String sqlDelete = "DELETE from sixth_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code



            try {
            String sqlQry = "INSERT INTO sixth_semester_drop(promotestatus,name,roll,reg,session,semester,cgpa) VALUES(?,?,?,?,?,?,?)";
            PreparedStatement prepStmts = con.prepareStatement(sqlQry);

            for (int i = 0; i < tb.getRowCount(); i++) {

                
 
                
                if ((tb.getValueAt(i, 0).toString().equals("true"))) { //start if condition
                
                    prepStmts.setString(1, tb.getValueAt(i, 0).toString());
                    prepStmts.setString(2, tb.getValueAt(i, 1).toString());
                    prepStmts.setString(3, tb.getValueAt(i, 2).toString());
                    prepStmts.setString(4, tb.getValueAt(i, 3).toString());
                    prepStmts.setString(5, tb.getValueAt(i, 4).toString());
                    prepStmts.setString(6, tb.getValueAt(i, 5).toString());
                    prepStmts.setString(7, tb.getValueAt(i, 6).toString());

                    prepStmts.execute();

                }

            }
            JOptionPane.showMessageDialog(this, "Dropped!!!");

        } catch (SQLException | HeadlessException e) {
          JOptionPane.showMessageDialog(null, e);
        }
            
         TableRefresh();
        }
        
        if("7th Semester"==Drop)
        {
          
            //////////////////start of delete code
         try{
         for (int i = 0; i < tb.getRowCount(); i++){
                 
         String sqlDelete = "DELETE from seventh_semster_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code



            try {
            String sqlQry = "INSERT INTO seventh_semster_drop(promotestatus,name,roll,reg,session,semester,cgpa) VALUES(?,?,?,?,?,?,?)";
            PreparedStatement prepStmts = con.prepareStatement(sqlQry);

            for (int i = 0; i < tb.getRowCount(); i++) {

                
 
                
                if ((tb.getValueAt(i, 0).toString().equals("true"))) { //start if condition
                
                    prepStmts.setString(1, tb.getValueAt(i, 0).toString());
                    prepStmts.setString(2, tb.getValueAt(i, 1).toString());
                    prepStmts.setString(3, tb.getValueAt(i, 2).toString());
                    prepStmts.setString(4, tb.getValueAt(i, 3).toString());
                    prepStmts.setString(5, tb.getValueAt(i, 4).toString());
                    prepStmts.setString(6, tb.getValueAt(i, 5).toString());
                    prepStmts.setString(7, tb.getValueAt(i, 6).toString());

                    prepStmts.execute();

                }

            }
            JOptionPane.showMessageDialog(this, "Dropped!!!");

        } catch (SQLException | HeadlessException e) {
          JOptionPane.showMessageDialog(null, e);
        }
            
         TableRefresh();
        }
        
        
        if("8th Semester"==Drop)
        {
          
            //////////////////start of delete code
         try{
         for (int i = 0; i < tb.getRowCount(); i++){
                 
         String sqlDelete = "DELETE from eighth_semester_drop where roll = '"+tb.getValueAt(i, 2).toString()+"'";
            
         PreparedStatement prepStmtd = con.prepareStatement(sqlDelete);
           
             
         prepStmtd.execute();
                 
         }            
         // JOptionPane.showMessageDialog(null, "Deleted!!!");
         }catch(SQLException | HeadlessException e)
         {
         //JOptionPane.showMessageDialog(null, e);
         }
         ///////////////////////end of delete code



            try {
            String sqlQry = "INSERT INTO eighth_semester_drop(promotestatus,name,roll,reg,session,semester,cgpa) VALUES(?,?,?,?,?,?,?)";
            PreparedStatement prepStmts = con.prepareStatement(sqlQry);

            for (int i = 0; i < tb.getRowCount(); i++) {

                
 
                
                if ((tb.getValueAt(i, 0).toString().equals("true"))) { //start if condition
                
                    prepStmts.setString(1, tb.getValueAt(i, 0).toString());
                    prepStmts.setString(2, tb.getValueAt(i, 1).toString());
                    prepStmts.setString(3, tb.getValueAt(i, 2).toString());
                    prepStmts.setString(4, tb.getValueAt(i, 3).toString());
                    prepStmts.setString(5, tb.getValueAt(i, 4).toString());
                    prepStmts.setString(6, tb.getValueAt(i, 5).toString());
                    prepStmts.setString(7, tb.getValueAt(i, 6).toString());

                    prepStmts.execute();

                }

            }
            JOptionPane.showMessageDialog(this, "Dropped!!!");

        } catch (SQLException | HeadlessException e) {
          JOptionPane.showMessageDialog(null, e);
        }
            
         TableRefresh();
        }
    }//GEN-LAST:event_jComboBoxDropActionPerformed

    
    
    
    
    void print_First_Semester_Drop() throws SQLException, BadElementException, IOException {
         Document document = new Document(PageSize.A4.rotate());
       // Document document = new Document(PageSize.A4);
        Font ff1 = new Font(Font.BOLD, 13);
        ff1.setStyle(Font.UNDERLINE);
        ff1.setColor(Color.BLACK);
        ff1.setStyle(Font.BOLD);
        
        Font ff5 = new Font(Font.BOLD, 18);
        ff5.setStyle(Font.UNDERLINE);
        ff5.setColor(Color.BLACK);
        ff5.setStyle(Font.BOLD);
        Font ff3 = new Font(Font.NORMAL, 11);
        ff3.setStyle(Font.COURIER);
        ff3.setColor(Color.BLACK);
        Font ff4 = new Font(Font.BOLD, 10);
        ff4.setStyle(Font.NORMAL);
        ff4.setColor(Color.BLACK);
        Paragraph paragraph3 = new Paragraph("\n");         
        paragraph3.setAlignment(Element.ALIGN_CENTER);
       

        try {

            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("Drop.pdf"));

            document.open();

            PdfContentByte cb = writer.getDirectContent();

            PdfPTable table = new PdfPTable(2);

            PdfPCell cell5 = new PdfPCell();

            String Name="",Roll="",Reg="",Session="",Semester="",CGPA="";

          
            
            ///////Name
          
             try{
            
            
            String Result = "1st Semester";
            String sqlSrch = "SELECT * FROM  first_semester_drop WHERE semester='"+Result+"'";
            
            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
                {
                Name = res.getString("name");
                Roll = res.getString("roll");
                Reg = res.getString("reg");
                Session = res.getString("session");
                Semester= res.getString("semester");
                CGPA=res.getString("cgpa");
                    
               
             
              
            }
            
            
            
        }catch(Exception e)
        {
            System.out.println("Error ==> "+e);
        }
             Paragraph Title = new Paragraph("Chittagong Polytechnic Institute", new Font(Font.BOLD, 40, Font.BOLD,Color.DARK_GRAY));
            Title.setAlignment(Element.ALIGN_CENTER);
            document.add(Title);
            Paragraph Subtitle = new Paragraph("Nasirabad, Chittagong - 4209", new Font(Font.BOLD, 20, Font.BOLD,Color.DARK_GRAY));
            Subtitle.setAlignment(Element.ALIGN_CENTER);
            document.add(Subtitle);

            Paragraph mainparagraph = new Paragraph("1st Semester Drop Students", new Font(Font.BOLD, 30, Font.BOLD,Color.DARK_GRAY));
            mainparagraph.setAlignment(Element.ALIGN_CENTER);
            
            

     
            
            PdfPTable my_report_table1 = new PdfPTable(2);
            
            //left side
            PdfPCell table_cell1 = new PdfPCell();
            my_report_table1.setWidthPercentage(100);

            table_cell1 = new PdfPCell(new Phrase(" ", new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            // table_cell1.setBorder(1);
            

            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table1.addCell(table_cell1);

            //right side
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss a");
            java.util.Date printDate = new java.util.Date();
            dateFormat.format(printDate);
           
            table_cell1 = new PdfPCell(new Phrase("Print Date & Time :  " + dateFormat.format(printDate), new Font(Font.NORMAL, 11, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //table_cell6.setBorder(Rectangle.NO_BORDER);
            
            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            my_report_table1.addCell(table_cell1);
                                 

            //TABLE HEADER
            PdfPTable my_report_table = new PdfPTable(6);
            float[] columnWidths = {0.5f,0.8f,0.8f,0.8f,0.8f,0.8f};
            my_report_table.setWidths(columnWidths);
            my_report_table.setWidthPercentage(100);
            String[] headers1 = new String[]{
                "Name","Roll","Reg", "Session", "Semester","CGPA"
            };

            PdfPTable table1 = new PdfPTable(headers1.length);
            table1.setWidths(columnWidths);
            table1.setWidthPercentage(100);
            for (String header : headers1) {
                PdfPCell cell = new PdfPCell();

                cell.setGrayFill(0.9f);
                cell.setPhrase(new Phrase(header, new Font(Font.NORMAL, 15, Font.BOLD)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table1.addCell(cell);
            }
            table1.completeRow();
            
            ////END OF HEADER
            
            ///////////////
            
            PdfPTable my_report_table2 = new PdfPTable(6);
            
            //left side
            PdfPCell table_cell2 = new PdfPCell();
            my_report_table2.setWidthPercentage(100);         
            my_report_table2.setWidths(columnWidths);

            
            ///////////////////
            
              try {

            
            //String sqlQry="Select * from emp_info ORDER BY Emp_ID ASC";
           String Result = "1st Semester";
            String sqlSrch = "SELECT * FROM  first_semester_drop WHERE semester='"+Result+"'";

            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
            {
                
            Name=res.getString("name");  
            table_cell2 = new PdfPCell(new Phrase(Name, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Roll = res.getString("roll");
             table_cell2 = new PdfPCell(new Phrase(Roll, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Reg = res.getString("reg");
             table_cell2 = new PdfPCell(new Phrase(Reg, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Session = res.getString("session");
            table_cell2 = new PdfPCell(new Phrase(Session, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            Semester = res.getString("semester");
            table_cell2 = new PdfPCell(new Phrase(Semester, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            CGPA = res.getString("cgpa");
            table_cell2 = new PdfPCell(new Phrase(CGPA, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
             
                
               
                
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
           

           ///////////////

            document.add(mainparagraph);
            document.add(paragraph3);
            document.add(my_report_table1);
           
            document.add(paragraph3);
            document.add(table1);
            document.add(my_report_table2);
            
            
           

            // document.add(table);
        } catch (DocumentException | HeadlessException e56) {
            System.err.println(e56.getMessage());
        }

        document.close(); 
     }
    
    
    
     void print_Second_Semester_Drop() throws SQLException, BadElementException, IOException {
         Document document = new Document(PageSize.A4.rotate());
       // Document document = new Document(PageSize.A4);
        Font ff1 = new Font(Font.BOLD, 13);
        ff1.setStyle(Font.UNDERLINE);
        ff1.setColor(Color.BLACK);
        ff1.setStyle(Font.BOLD);
        
        Font ff5 = new Font(Font.BOLD, 18);
        ff5.setStyle(Font.UNDERLINE);
        ff5.setColor(Color.BLACK);
        ff5.setStyle(Font.BOLD);
        Font ff3 = new Font(Font.NORMAL, 11);
        ff3.setStyle(Font.COURIER);
        ff3.setColor(Color.BLACK);
        Font ff4 = new Font(Font.BOLD, 10);
        ff4.setStyle(Font.NORMAL);
        ff4.setColor(Color.BLACK);
        Paragraph paragraph3 = new Paragraph("\n");         
        paragraph3.setAlignment(Element.ALIGN_CENTER);
       

        try {

            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("Drop.pdf"));

            document.open();

            PdfContentByte cb = writer.getDirectContent();

            PdfPTable table = new PdfPTable(2);

            PdfPCell cell5 = new PdfPCell();

            String Name="",Roll="",Reg="",Session="",Semester="",CGPA="";

          
            
            ///////Name
          
             try{
            
            
            String Result = "2nd Semester";
            String sqlSrch = "SELECT * FROM  second_semester_drop WHERE semester='"+Result+"'";
            
            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
                {
                Name = res.getString("name");
                Roll = res.getString("roll");
                Reg = res.getString("reg");
                Session = res.getString("session");
                Semester= res.getString("semester");
                CGPA=res.getString("cgpa");
                    
               
             
              
            }
            
            
            
        }catch(Exception e)
        {
            System.out.println("Error ==> "+e);
        }
             Paragraph Title = new Paragraph("Chittagong Polytechnic Institute", new Font(Font.BOLD, 40, Font.BOLD,Color.DARK_GRAY));
            Title.setAlignment(Element.ALIGN_CENTER);
            document.add(Title);
            Paragraph Subtitle = new Paragraph("Nasirabad, Chittagong - 4209", new Font(Font.BOLD, 20, Font.BOLD,Color.DARK_GRAY));
            Subtitle.setAlignment(Element.ALIGN_CENTER);
            document.add(Subtitle);

            Paragraph mainparagraph = new Paragraph("2nd Semester Drop Students", new Font(Font.BOLD, 30, Font.BOLD,Color.DARK_GRAY));
            mainparagraph.setAlignment(Element.ALIGN_CENTER);
            
            

     
            
            PdfPTable my_report_table1 = new PdfPTable(2);
            
            //left side
            PdfPCell table_cell1 = new PdfPCell();
            my_report_table1.setWidthPercentage(100);

            table_cell1 = new PdfPCell(new Phrase(" ", new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            // table_cell1.setBorder(1);
            

            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table1.addCell(table_cell1);

            //right side
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss a");
            java.util.Date printDate = new java.util.Date();
            dateFormat.format(printDate);
           
            table_cell1 = new PdfPCell(new Phrase("Print Date & Time :  " + dateFormat.format(printDate), new Font(Font.NORMAL, 11, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //table_cell6.setBorder(Rectangle.NO_BORDER);
            
            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            my_report_table1.addCell(table_cell1);
                                 

            //TABLE HEADER
            PdfPTable my_report_table = new PdfPTable(6);
            float[] columnWidths = {0.5f,0.8f,0.8f,0.8f,0.8f,0.8f};
            my_report_table.setWidths(columnWidths);
            my_report_table.setWidthPercentage(100);
            String[] headers1 = new String[]{
                "Name","Roll","Reg", "Session", "Semester","CGPA"
            };

            PdfPTable table1 = new PdfPTable(headers1.length);
            table1.setWidths(columnWidths);
            table1.setWidthPercentage(100);
            for (String header : headers1) {
                PdfPCell cell = new PdfPCell();

                cell.setGrayFill(0.9f);
                cell.setPhrase(new Phrase(header, new Font(Font.NORMAL, 15, Font.BOLD)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table1.addCell(cell);
            }
            table1.completeRow();
            
            ////END OF HEADER
            
            ///////////////
            
            PdfPTable my_report_table2 = new PdfPTable(6);
            
            //left side
            PdfPCell table_cell2 = new PdfPCell();
            my_report_table2.setWidthPercentage(100);         
            my_report_table2.setWidths(columnWidths);

            
            ///////////////////
            
              try {

            
            //String sqlQry="Select * from emp_info ORDER BY Emp_ID ASC";
           String Result = "2nd Semester";
            String sqlSrch = "SELECT * FROM  second_semester_drop WHERE semester='"+Result+"'";

            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
            {
                
            Name=res.getString("name");  
            table_cell2 = new PdfPCell(new Phrase(Name, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Roll = res.getString("roll");
             table_cell2 = new PdfPCell(new Phrase(Roll, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Reg = res.getString("reg");
             table_cell2 = new PdfPCell(new Phrase(Reg, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Session = res.getString("session");
            table_cell2 = new PdfPCell(new Phrase(Session, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            Semester = res.getString("semester");
            table_cell2 = new PdfPCell(new Phrase(Semester, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            CGPA = res.getString("cgpa");
            table_cell2 = new PdfPCell(new Phrase(CGPA, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
             
                
               
                
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
           

           ///////////////

            document.add(mainparagraph);
            document.add(paragraph3);
            document.add(my_report_table1);
           
            document.add(paragraph3);
            document.add(table1);
            document.add(my_report_table2);
            
            
           

            // document.add(table);
        } catch (DocumentException | HeadlessException e56) {
            System.err.println(e56.getMessage());
        }

        document.close(); 
     }
     
     
      void print_Third_Semester_Drop() throws SQLException, BadElementException, IOException {
         Document document = new Document(PageSize.A4.rotate());
       // Document document = new Document(PageSize.A4);
        Font ff1 = new Font(Font.BOLD, 13);
        ff1.setStyle(Font.UNDERLINE);
        ff1.setColor(Color.BLACK);
        ff1.setStyle(Font.BOLD);
        
        Font ff5 = new Font(Font.BOLD, 18);
        ff5.setStyle(Font.UNDERLINE);
        ff5.setColor(Color.BLACK);
        ff5.setStyle(Font.BOLD);
        Font ff3 = new Font(Font.NORMAL, 11);
        ff3.setStyle(Font.COURIER);
        ff3.setColor(Color.BLACK);
        Font ff4 = new Font(Font.BOLD, 10);
        ff4.setStyle(Font.NORMAL);
        ff4.setColor(Color.BLACK);
        Paragraph paragraph3 = new Paragraph("\n");         
        paragraph3.setAlignment(Element.ALIGN_CENTER);
       

        try {

            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("Drop.pdf"));

            document.open();

            PdfContentByte cb = writer.getDirectContent();

            PdfPTable table = new PdfPTable(2);

            PdfPCell cell5 = new PdfPCell();

            String Name="",Roll="",Reg="",Session="",Semester="",CGPA="";

          
            
            ///////Name
          
             try{
            
            
            String Result = "3rd Semester";
            String sqlSrch = "SELECT * FROM  third_semester_drop WHERE semester='"+Result+"'";
            
            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
                {
                Name = res.getString("name");
                Roll = res.getString("roll");
                Reg = res.getString("reg");
                Session = res.getString("session");
                Semester= res.getString("semester");
                CGPA=res.getString("cgpa");
                    
               
             
              
            }
            
            
            
        }catch(Exception e)
        {
            System.out.println("Error ==> "+e);
        }
             Paragraph Title = new Paragraph("Chittagong Polytechnic Institute", new Font(Font.BOLD, 40, Font.BOLD,Color.DARK_GRAY));
            Title.setAlignment(Element.ALIGN_CENTER);
            document.add(Title);
            Paragraph Subtitle = new Paragraph("Nasirabad, Chittagong - 4209", new Font(Font.BOLD, 20, Font.BOLD,Color.DARK_GRAY));
            Subtitle.setAlignment(Element.ALIGN_CENTER);
            document.add(Subtitle);

            Paragraph mainparagraph = new Paragraph("3rd Semester Drop Students", new Font(Font.BOLD, 30, Font.BOLD,Color.DARK_GRAY));
            mainparagraph.setAlignment(Element.ALIGN_CENTER);
            
            

     
            
            PdfPTable my_report_table1 = new PdfPTable(2);
            
            //left side
            PdfPCell table_cell1 = new PdfPCell();
            my_report_table1.setWidthPercentage(100);

            table_cell1 = new PdfPCell(new Phrase(" ", new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            // table_cell1.setBorder(1);
            

            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table1.addCell(table_cell1);

            //right side
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss a");
            java.util.Date printDate = new java.util.Date();
            dateFormat.format(printDate);
           
            table_cell1 = new PdfPCell(new Phrase("Print Date & Time :  " + dateFormat.format(printDate), new Font(Font.NORMAL, 11, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //table_cell6.setBorder(Rectangle.NO_BORDER);
            
            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            my_report_table1.addCell(table_cell1);
                                 

            //TABLE HEADER
            PdfPTable my_report_table = new PdfPTable(6);
            float[] columnWidths = {0.5f,0.8f,0.8f,0.8f,0.8f,0.8f};
            my_report_table.setWidths(columnWidths);
            my_report_table.setWidthPercentage(100);
            String[] headers1 = new String[]{
                "Name","Roll","Reg", "Session", "Semester","CGPA"
            };

            PdfPTable table1 = new PdfPTable(headers1.length);
            table1.setWidths(columnWidths);
            table1.setWidthPercentage(100);
            for (String header : headers1) {
                PdfPCell cell = new PdfPCell();

                cell.setGrayFill(0.9f);
                cell.setPhrase(new Phrase(header, new Font(Font.NORMAL, 15, Font.BOLD)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table1.addCell(cell);
            }
            table1.completeRow();
            
            ////END OF HEADER
            
            ///////////////
            
            PdfPTable my_report_table2 = new PdfPTable(6);
            
            //left side
            PdfPCell table_cell2 = new PdfPCell();
            my_report_table2.setWidthPercentage(100);         
            my_report_table2.setWidths(columnWidths);

            
            ///////////////////
            
              try {

            
            //String sqlQry="Select * from emp_info ORDER BY Emp_ID ASC";
           String Result = "3rd Semester";
            String sqlSrch = "SELECT * FROM  third_semester_drop WHERE semester='"+Result+"'";

            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
            {
                
            Name=res.getString("name");  
            table_cell2 = new PdfPCell(new Phrase(Name, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Roll = res.getString("roll");
             table_cell2 = new PdfPCell(new Phrase(Roll, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Reg = res.getString("reg");
             table_cell2 = new PdfPCell(new Phrase(Reg, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Session = res.getString("session");
            table_cell2 = new PdfPCell(new Phrase(Session, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            Semester = res.getString("semester");
            table_cell2 = new PdfPCell(new Phrase(Semester, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            CGPA = res.getString("cgpa");
            table_cell2 = new PdfPCell(new Phrase(CGPA, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
             
                
               
                
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
           

           ///////////////

            document.add(mainparagraph);
            document.add(paragraph3);
            document.add(my_report_table1);
           
            document.add(paragraph3);
            document.add(table1);
            document.add(my_report_table2);
            
            
           

            // document.add(table);
        } catch (DocumentException | HeadlessException e56) {
            System.err.println(e56.getMessage());
        }

        document.close(); 
     }
      
       void print_Fourth_Semester_Drop() throws SQLException, BadElementException, IOException {
         Document document = new Document(PageSize.A4.rotate());
       // Document document = new Document(PageSize.A4);
        Font ff1 = new Font(Font.BOLD, 13);
        ff1.setStyle(Font.UNDERLINE);
        ff1.setColor(Color.BLACK);
        ff1.setStyle(Font.BOLD);
        
        Font ff5 = new Font(Font.BOLD, 18);
        ff5.setStyle(Font.UNDERLINE);
        ff5.setColor(Color.BLACK);
        ff5.setStyle(Font.BOLD);
        Font ff3 = new Font(Font.NORMAL, 11);
        ff3.setStyle(Font.COURIER);
        ff3.setColor(Color.BLACK);
        Font ff4 = new Font(Font.BOLD, 10);
        ff4.setStyle(Font.NORMAL);
        ff4.setColor(Color.BLACK);
        Paragraph paragraph3 = new Paragraph("\n");         
        paragraph3.setAlignment(Element.ALIGN_CENTER);
       

        try {

            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("Drop.pdf"));

            document.open();

            PdfContentByte cb = writer.getDirectContent();

            PdfPTable table = new PdfPTable(2);

            PdfPCell cell5 = new PdfPCell();

            String Name="",Roll="",Reg="",Session="",Semester="",CGPA="";

          
            
            ///////Name
          
             try{
            
            
            String Result = "4th Semester";
            String sqlSrch = "SELECT * FROM  fourth_semester_drop WHERE semester='"+Result+"'";
            
            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
                {
                Name = res.getString("name");
                Roll = res.getString("roll");
                Reg = res.getString("reg");
                Session = res.getString("session");
                Semester= res.getString("semester");
                CGPA=res.getString("cgpa");
                    
               
             
              
            }
            
            
            
        }catch(Exception e)
        {
            System.out.println("Error ==> "+e);
        }
             Paragraph Title = new Paragraph("Chittagong Polytechnic Institute", new Font(Font.BOLD, 40, Font.BOLD,Color.DARK_GRAY));
            Title.setAlignment(Element.ALIGN_CENTER);
            document.add(Title);
            Paragraph Subtitle = new Paragraph("Nasirabad, Chittagong - 4209", new Font(Font.BOLD, 20, Font.BOLD,Color.DARK_GRAY));
            Subtitle.setAlignment(Element.ALIGN_CENTER);
            document.add(Subtitle);

            Paragraph mainparagraph = new Paragraph("4th Semester Drop Students", new Font(Font.BOLD, 30, Font.BOLD,Color.DARK_GRAY));
            mainparagraph.setAlignment(Element.ALIGN_CENTER);
            
            

     
            
            PdfPTable my_report_table1 = new PdfPTable(2);
            
            //left side
            PdfPCell table_cell1 = new PdfPCell();
            my_report_table1.setWidthPercentage(100);

            table_cell1 = new PdfPCell(new Phrase(" ", new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            // table_cell1.setBorder(1);
            

            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table1.addCell(table_cell1);

            //right side
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss a");
            java.util.Date printDate = new java.util.Date();
            dateFormat.format(printDate);
           
            table_cell1 = new PdfPCell(new Phrase("Print Date & Time :  " + dateFormat.format(printDate), new Font(Font.NORMAL, 11, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //table_cell6.setBorder(Rectangle.NO_BORDER);
            
            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            my_report_table1.addCell(table_cell1);
                                 

            //TABLE HEADER
            PdfPTable my_report_table = new PdfPTable(6);
            float[] columnWidths = {0.5f,0.8f,0.8f,0.8f,0.8f,0.8f};
            my_report_table.setWidths(columnWidths);
            my_report_table.setWidthPercentage(100);
            String[] headers1 = new String[]{
                "Name","Roll","Reg", "Session", "Semester","CGPA"
            };

            PdfPTable table1 = new PdfPTable(headers1.length);
            table1.setWidths(columnWidths);
            table1.setWidthPercentage(100);
            for (String header : headers1) {
                PdfPCell cell = new PdfPCell();

                cell.setGrayFill(0.9f);
                cell.setPhrase(new Phrase(header, new Font(Font.NORMAL, 15, Font.BOLD)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table1.addCell(cell);
            }
            table1.completeRow();
            
            ////END OF HEADER
            
            ///////////////
            
            PdfPTable my_report_table2 = new PdfPTable(6);
            
            //left side
            PdfPCell table_cell2 = new PdfPCell();
            my_report_table2.setWidthPercentage(100);         
            my_report_table2.setWidths(columnWidths);

            
            ///////////////////
            
              try {

            
            //String sqlQry="Select * from emp_info ORDER BY Emp_ID ASC";
           String Result = "4th Semester";
            String sqlSrch = "SELECT * FROM  fourth_semester_drop WHERE semester='"+Result+"'";

            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
            {
                
            Name=res.getString("name");  
            table_cell2 = new PdfPCell(new Phrase(Name, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Roll = res.getString("roll");
             table_cell2 = new PdfPCell(new Phrase(Roll, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Reg = res.getString("reg");
             table_cell2 = new PdfPCell(new Phrase(Reg, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Session = res.getString("session");
            table_cell2 = new PdfPCell(new Phrase(Session, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            Semester = res.getString("semester");
            table_cell2 = new PdfPCell(new Phrase(Semester, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            CGPA = res.getString("cgpa");
            table_cell2 = new PdfPCell(new Phrase(CGPA, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
             
                
               
                
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
           

           ///////////////

            document.add(mainparagraph);
            document.add(paragraph3);
            document.add(my_report_table1);
           
            document.add(paragraph3);
            document.add(table1);
            document.add(my_report_table2);
            
            
           

            // document.add(table);
        } catch (DocumentException | HeadlessException e56) {
            System.err.println(e56.getMessage());
        }

        document.close(); 
     }
        void print_Fifth_Semester_Drop() throws SQLException, BadElementException, IOException {
         Document document = new Document(PageSize.A4.rotate());
       // Document document = new Document(PageSize.A4);
        Font ff1 = new Font(Font.BOLD, 13);
        ff1.setStyle(Font.UNDERLINE);
        ff1.setColor(Color.BLACK);
        ff1.setStyle(Font.BOLD);
        
        Font ff5 = new Font(Font.BOLD, 18);
        ff5.setStyle(Font.UNDERLINE);
        ff5.setColor(Color.BLACK);
        ff5.setStyle(Font.BOLD);
        Font ff3 = new Font(Font.NORMAL, 11);
        ff3.setStyle(Font.COURIER);
        ff3.setColor(Color.BLACK);
        Font ff4 = new Font(Font.BOLD, 10);
        ff4.setStyle(Font.NORMAL);
        ff4.setColor(Color.BLACK);
        Paragraph paragraph3 = new Paragraph("\n");         
        paragraph3.setAlignment(Element.ALIGN_CENTER);
       

        try {

            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("Drop.pdf"));

            document.open();

            PdfContentByte cb = writer.getDirectContent();

            PdfPTable table = new PdfPTable(2);

            PdfPCell cell5 = new PdfPCell();

            String Name="",Roll="",Reg="",Session="",Semester="",CGPA="";

          
            
            ///////Name
          
             try{
            
            
            String Result = "5th Semester";
            String sqlSrch = "SELECT * FROM  fifth_semester_drop WHERE semester='"+Result+"'";
            
            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
                {
                Name = res.getString("name");
                Roll = res.getString("roll");
                Reg = res.getString("reg");
                Session = res.getString("session");
                Semester= res.getString("semester");
                CGPA=res.getString("cgpa");
                    
               
             
              
            }
            
            
            
        }catch(Exception e)
        {
            System.out.println("Error ==> "+e);
        }
             Paragraph Title = new Paragraph("Chittagong Polytechnic Institute", new Font(Font.BOLD, 40, Font.BOLD,Color.DARK_GRAY));
            Title.setAlignment(Element.ALIGN_CENTER);
            document.add(Title);
            Paragraph Subtitle = new Paragraph("Nasirabad, Chittagong - 4209", new Font(Font.BOLD, 20, Font.BOLD,Color.DARK_GRAY));
            Subtitle.setAlignment(Element.ALIGN_CENTER);
            document.add(Subtitle);

            Paragraph mainparagraph = new Paragraph("5th Semester Drop Students", new Font(Font.BOLD, 30, Font.BOLD,Color.DARK_GRAY));
            mainparagraph.setAlignment(Element.ALIGN_CENTER);
            
            

     
            
            PdfPTable my_report_table1 = new PdfPTable(2);
            
            //left side
            PdfPCell table_cell1 = new PdfPCell();
            my_report_table1.setWidthPercentage(100);

            table_cell1 = new PdfPCell(new Phrase(" ", new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            // table_cell1.setBorder(1);
            

            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table1.addCell(table_cell1);

            //right side
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss a");
            java.util.Date printDate = new java.util.Date();
            dateFormat.format(printDate);
           
            table_cell1 = new PdfPCell(new Phrase("Print Date & Time :  " + dateFormat.format(printDate), new Font(Font.NORMAL, 11, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //table_cell6.setBorder(Rectangle.NO_BORDER);
            
            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            my_report_table1.addCell(table_cell1);
                                 

            //TABLE HEADER
            PdfPTable my_report_table = new PdfPTable(6);
            float[] columnWidths = {0.5f,0.8f,0.8f,0.8f,0.8f,0.8f};
            my_report_table.setWidths(columnWidths);
            my_report_table.setWidthPercentage(100);
            String[] headers1 = new String[]{
                "Name","Roll","Reg", "Session", "Semester","CGPA"
            };

            PdfPTable table1 = new PdfPTable(headers1.length);
            table1.setWidths(columnWidths);
            table1.setWidthPercentage(100);
            for (String header : headers1) {
                PdfPCell cell = new PdfPCell();

                cell.setGrayFill(0.9f);
                cell.setPhrase(new Phrase(header, new Font(Font.NORMAL, 15, Font.BOLD)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table1.addCell(cell);
            }
            table1.completeRow();
            
            ////END OF HEADER
            
            ///////////////
            
            PdfPTable my_report_table2 = new PdfPTable(6);
            
            //left side
            PdfPCell table_cell2 = new PdfPCell();
            my_report_table2.setWidthPercentage(100);         
            my_report_table2.setWidths(columnWidths);

            
            ///////////////////
            
              try {

            
            //String sqlQry="Select * from emp_info ORDER BY Emp_ID ASC";
           String Result = "5th Semester";
            String sqlSrch = "SELECT * FROM  fifth_semester_drop WHERE semester='"+Result+"'";

            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
            {
                
            Name=res.getString("name");  
            table_cell2 = new PdfPCell(new Phrase(Name, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Roll = res.getString("roll");
             table_cell2 = new PdfPCell(new Phrase(Roll, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Reg = res.getString("reg");
             table_cell2 = new PdfPCell(new Phrase(Reg, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Session = res.getString("session");
            table_cell2 = new PdfPCell(new Phrase(Session, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            Semester = res.getString("semester");
            table_cell2 = new PdfPCell(new Phrase(Semester, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            CGPA = res.getString("cgpa");
            table_cell2 = new PdfPCell(new Phrase(CGPA, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
             
                
               
                
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
           

           ///////////////

            document.add(mainparagraph);
            document.add(paragraph3);
            document.add(my_report_table1);
           
            document.add(paragraph3);
            document.add(table1);
            document.add(my_report_table2);
            
            
           

            // document.add(table);
        } catch (DocumentException | HeadlessException e56) {
            System.err.println(e56.getMessage());
        }

        document.close(); 
     }
        
         void print_Sixth_Semester_Drop() throws SQLException, BadElementException, IOException {
         Document document = new Document(PageSize.A4.rotate());
       // Document document = new Document(PageSize.A4);
        Font ff1 = new Font(Font.BOLD, 13);
        ff1.setStyle(Font.UNDERLINE);
        ff1.setColor(Color.BLACK);
        ff1.setStyle(Font.BOLD);
        
        Font ff5 = new Font(Font.BOLD, 18);
        ff5.setStyle(Font.UNDERLINE);
        ff5.setColor(Color.BLACK);
        ff5.setStyle(Font.BOLD);
        Font ff3 = new Font(Font.NORMAL, 11);
        ff3.setStyle(Font.COURIER);
        ff3.setColor(Color.BLACK);
        Font ff4 = new Font(Font.BOLD, 10);
        ff4.setStyle(Font.NORMAL);
        ff4.setColor(Color.BLACK);
        Paragraph paragraph3 = new Paragraph("\n");         
        paragraph3.setAlignment(Element.ALIGN_CENTER);
       

        try {

            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("Drop.pdf"));

            document.open();

            PdfContentByte cb = writer.getDirectContent();

            PdfPTable table = new PdfPTable(2);

            PdfPCell cell5 = new PdfPCell();

            String Name="",Roll="",Reg="",Session="",Semester="",CGPA="";

          
            
            ///////Name
          
             try{
            
            
            String Result = "6th Semester";
            String sqlSrch = "SELECT * FROM  sixth_semester_drop WHERE semester='"+Result+"'";
            
            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
                {
                Name = res.getString("name");
                Roll = res.getString("roll");
                Reg = res.getString("reg");
                Session = res.getString("session");
                Semester= res.getString("semester");
                CGPA=res.getString("cgpa");
                    
               
             
              
            }
            
            
            
        }catch(Exception e)
        {
            System.out.println("Error ==> "+e);
        }
             Paragraph Title = new Paragraph("Chittagong Polytechnic Institute", new Font(Font.BOLD, 40, Font.BOLD,Color.DARK_GRAY));
            Title.setAlignment(Element.ALIGN_CENTER);
            document.add(Title);
            Paragraph Subtitle = new Paragraph("Nasirabad, Chittagong - 4209", new Font(Font.BOLD, 20, Font.BOLD,Color.DARK_GRAY));
            Subtitle.setAlignment(Element.ALIGN_CENTER);
            document.add(Subtitle);

            Paragraph mainparagraph = new Paragraph("6th Semester Drop Students", new Font(Font.BOLD, 30, Font.BOLD,Color.DARK_GRAY));
            mainparagraph.setAlignment(Element.ALIGN_CENTER);
            
            

     
            
            PdfPTable my_report_table1 = new PdfPTable(2);
            
            //left side
            PdfPCell table_cell1 = new PdfPCell();
            my_report_table1.setWidthPercentage(100);

            table_cell1 = new PdfPCell(new Phrase(" ", new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            // table_cell1.setBorder(1);
            

            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table1.addCell(table_cell1);

            //right side
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss a");
            java.util.Date printDate = new java.util.Date();
            dateFormat.format(printDate);
           
            table_cell1 = new PdfPCell(new Phrase("Print Date & Time :  " + dateFormat.format(printDate), new Font(Font.NORMAL, 11, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //table_cell6.setBorder(Rectangle.NO_BORDER);
            
            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            my_report_table1.addCell(table_cell1);
                                 

            //TABLE HEADER
            PdfPTable my_report_table = new PdfPTable(6);
            float[] columnWidths = {0.5f,0.8f,0.8f,0.8f,0.8f,0.8f};
            my_report_table.setWidths(columnWidths);
            my_report_table.setWidthPercentage(100);
            String[] headers1 = new String[]{
                "Name","Roll","Reg", "Session", "Semester","CGPA"
            };

            PdfPTable table1 = new PdfPTable(headers1.length);
            table1.setWidths(columnWidths);
            table1.setWidthPercentage(100);
            for (String header : headers1) {
                PdfPCell cell = new PdfPCell();

                cell.setGrayFill(0.9f);
                cell.setPhrase(new Phrase(header, new Font(Font.NORMAL, 15, Font.BOLD)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table1.addCell(cell);
            }
            table1.completeRow();
            
            ////END OF HEADER
            
            ///////////////
            
            PdfPTable my_report_table2 = new PdfPTable(6);
            
            //left side
            PdfPCell table_cell2 = new PdfPCell();
            my_report_table2.setWidthPercentage(100);         
            my_report_table2.setWidths(columnWidths);

            
            ///////////////////
            
              try {

            
            //String sqlQry="Select * from emp_info ORDER BY Emp_ID ASC";
           String Result = "6th Semester";
            String sqlSrch = "SELECT * FROM  sixth_semester_drop WHERE semester='"+Result+"'";

            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
            {
                
            Name=res.getString("name");  
            table_cell2 = new PdfPCell(new Phrase(Name, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Roll = res.getString("roll");
             table_cell2 = new PdfPCell(new Phrase(Roll, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Reg = res.getString("reg");
             table_cell2 = new PdfPCell(new Phrase(Reg, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Session = res.getString("session");
            table_cell2 = new PdfPCell(new Phrase(Session, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            Semester = res.getString("semester");
            table_cell2 = new PdfPCell(new Phrase(Semester, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            CGPA = res.getString("cgpa");
            table_cell2 = new PdfPCell(new Phrase(CGPA, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
             
                
               
                
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
           

           ///////////////

            document.add(mainparagraph);
            document.add(paragraph3);
            document.add(my_report_table1);
           
            document.add(paragraph3);
            document.add(table1);
            document.add(my_report_table2);
            
            
           

            // document.add(table);
        } catch (DocumentException | HeadlessException e56) {
            System.err.println(e56.getMessage());
        }

        document.close(); 
     }
         
          void print_Seventh_Semester_Drop() throws SQLException, BadElementException, IOException {
         Document document = new Document(PageSize.A4.rotate());
       // Document document = new Document(PageSize.A4);
        Font ff1 = new Font(Font.BOLD, 13);
        ff1.setStyle(Font.UNDERLINE);
        ff1.setColor(Color.BLACK);
        ff1.setStyle(Font.BOLD);
        
        Font ff5 = new Font(Font.BOLD, 18);
        ff5.setStyle(Font.UNDERLINE);
        ff5.setColor(Color.BLACK);
        ff5.setStyle(Font.BOLD);
        Font ff3 = new Font(Font.NORMAL, 11);
        ff3.setStyle(Font.COURIER);
        ff3.setColor(Color.BLACK);
        Font ff4 = new Font(Font.BOLD, 10);
        ff4.setStyle(Font.NORMAL);
        ff4.setColor(Color.BLACK);
        Paragraph paragraph3 = new Paragraph("\n");         
        paragraph3.setAlignment(Element.ALIGN_CENTER);
       

        try {

            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("Drop.pdf"));

            document.open();

            PdfContentByte cb = writer.getDirectContent();

            PdfPTable table = new PdfPTable(2);

            PdfPCell cell5 = new PdfPCell();

            String Name="",Roll="",Reg="",Session="",Semester="",CGPA="";

          
            
            ///////Name
          
             try{
            
            
            String Result = "7th Semester";
            String sqlSrch = "SELECT * FROM  seventh_semster_drop WHERE semester='"+Result+"'";
            
            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
                {
                Name = res.getString("name");
                Roll = res.getString("roll");
                Reg = res.getString("reg");
                Session = res.getString("session");
                Semester= res.getString("semester");
                CGPA=res.getString("cgpa");
                    
               
             
              
            }
            
            
            
        }catch(Exception e)
        {
            System.out.println("Error ==> "+e);
        }
             Paragraph Title = new Paragraph("Chittagong Polytechnic Institute", new Font(Font.BOLD, 40, Font.BOLD,Color.DARK_GRAY));
            Title.setAlignment(Element.ALIGN_CENTER);
            document.add(Title);
            Paragraph Subtitle = new Paragraph("Nasirabad, Chittagong - 4209", new Font(Font.BOLD, 20, Font.BOLD,Color.DARK_GRAY));
            Subtitle.setAlignment(Element.ALIGN_CENTER);
            document.add(Subtitle);

            Paragraph mainparagraph = new Paragraph("7th Semester Drop Students", new Font(Font.BOLD, 30, Font.BOLD,Color.DARK_GRAY));
            mainparagraph.setAlignment(Element.ALIGN_CENTER);
            
            

     
            
            PdfPTable my_report_table1 = new PdfPTable(2);
            
            //left side
            PdfPCell table_cell1 = new PdfPCell();
            my_report_table1.setWidthPercentage(100);

            table_cell1 = new PdfPCell(new Phrase(" ", new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            // table_cell1.setBorder(1);
            

            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table1.addCell(table_cell1);

            //right side
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss a");
            java.util.Date printDate = new java.util.Date();
            dateFormat.format(printDate);
           
            table_cell1 = new PdfPCell(new Phrase("Print Date & Time :  " + dateFormat.format(printDate), new Font(Font.NORMAL, 11, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //table_cell6.setBorder(Rectangle.NO_BORDER);
            
            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            my_report_table1.addCell(table_cell1);
                                 

            //TABLE HEADER
            PdfPTable my_report_table = new PdfPTable(6);
            float[] columnWidths = {0.5f,0.8f,0.8f,0.8f,0.8f,0.8f};
            my_report_table.setWidths(columnWidths);
            my_report_table.setWidthPercentage(100);
            String[] headers1 = new String[]{
                "Name","Roll","Reg", "Session", "Semester","CGPA"
            };

            PdfPTable table1 = new PdfPTable(headers1.length);
            table1.setWidths(columnWidths);
            table1.setWidthPercentage(100);
            for (String header : headers1) {
                PdfPCell cell = new PdfPCell();

                cell.setGrayFill(0.9f);
                cell.setPhrase(new Phrase(header, new Font(Font.NORMAL, 15, Font.BOLD)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table1.addCell(cell);
            }
            table1.completeRow();
            
            ////END OF HEADER
            
            ///////////////
            
            PdfPTable my_report_table2 = new PdfPTable(6);
            
            //left side
            PdfPCell table_cell2 = new PdfPCell();
            my_report_table2.setWidthPercentage(100);         
            my_report_table2.setWidths(columnWidths);

            
            ///////////////////
            
              try {

            
            //String sqlQry="Select * from emp_info ORDER BY Emp_ID ASC";
           String Result = "7th Semester";
            String sqlSrch = "SELECT * FROM  seventh_semster_drop WHERE semester='"+Result+"'";

            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
            {
                
            Name=res.getString("name");  
            table_cell2 = new PdfPCell(new Phrase(Name, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Roll = res.getString("roll");
             table_cell2 = new PdfPCell(new Phrase(Roll, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Reg = res.getString("reg");
             table_cell2 = new PdfPCell(new Phrase(Reg, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Session = res.getString("session");
            table_cell2 = new PdfPCell(new Phrase(Session, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            Semester = res.getString("semester");
            table_cell2 = new PdfPCell(new Phrase(Semester, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            CGPA = res.getString("cgpa");
            table_cell2 = new PdfPCell(new Phrase(CGPA, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
             
                
               
                
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
           

           ///////////////

            document.add(mainparagraph);
            document.add(paragraph3);
            document.add(my_report_table1);
           
            document.add(paragraph3);
            document.add(table1);
            document.add(my_report_table2);
            
            
           

            // document.add(table);
        } catch (DocumentException | HeadlessException e56) {
            System.err.println(e56.getMessage());
        }

        document.close(); 
     }
          
           void print_Eighth_Semester_Drop() throws SQLException, BadElementException, IOException {
         Document document = new Document(PageSize.A4.rotate());
       // Document document = new Document(PageSize.A4);
        Font ff1 = new Font(Font.BOLD, 13);
        ff1.setStyle(Font.UNDERLINE);
        ff1.setColor(Color.BLACK);
        ff1.setStyle(Font.BOLD);
        
        Font ff5 = new Font(Font.BOLD, 18);
        ff5.setStyle(Font.UNDERLINE);
        ff5.setColor(Color.BLACK);
        ff5.setStyle(Font.BOLD);
        Font ff3 = new Font(Font.NORMAL, 11);
        ff3.setStyle(Font.COURIER);
        ff3.setColor(Color.BLACK);
        Font ff4 = new Font(Font.BOLD, 10);
        ff4.setStyle(Font.NORMAL);
        ff4.setColor(Color.BLACK);
        Paragraph paragraph3 = new Paragraph("\n");         
        paragraph3.setAlignment(Element.ALIGN_CENTER);
       

        try {

            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("Drop.pdf"));

            document.open();

            PdfContentByte cb = writer.getDirectContent();

            PdfPTable table = new PdfPTable(2);

            PdfPCell cell5 = new PdfPCell();

            String Name="",Roll="",Reg="",Session="",Semester="",CGPA="";

          
            
            ///////Name
          
             try{
            
            
            String Result = "8th Semester";
            String sqlSrch = "SELECT * FROM  eighth_semester_drop WHERE semester='"+Result+"'";
            
            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
                {
                Name = res.getString("name");
                Roll = res.getString("roll");
                Reg = res.getString("reg");
                Session = res.getString("session");
                Semester= res.getString("semester");
                CGPA=res.getString("cgpa");
                    
               
             
              
            }
            
            
            
        }catch(Exception e)
        {
            System.out.println("Error ==> "+e);
        }
             Paragraph Title = new Paragraph("Chittagong Polytechnic Institute", new Font(Font.BOLD, 40, Font.BOLD,Color.DARK_GRAY));
            Title.setAlignment(Element.ALIGN_CENTER);
            document.add(Title);
            Paragraph Subtitle = new Paragraph("Nasirabad, Chittagong - 4209", new Font(Font.BOLD, 20, Font.BOLD,Color.DARK_GRAY));
            Subtitle.setAlignment(Element.ALIGN_CENTER);
            document.add(Subtitle);

            Paragraph mainparagraph = new Paragraph("8th Semester Drop Students", new Font(Font.BOLD, 30, Font.BOLD,Color.DARK_GRAY));
            mainparagraph.setAlignment(Element.ALIGN_CENTER);
            
            

     
            
            PdfPTable my_report_table1 = new PdfPTable(2);
            
            //left side
            PdfPCell table_cell1 = new PdfPCell();
            my_report_table1.setWidthPercentage(100);

            table_cell1 = new PdfPCell(new Phrase(" ", new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_LEFT);
            // table_cell1.setBorder(1);
            

            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table1.addCell(table_cell1);

            //right side
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy hh:mm:ss a");
            java.util.Date printDate = new java.util.Date();
            dateFormat.format(printDate);
           
            table_cell1 = new PdfPCell(new Phrase("Print Date & Time :  " + dateFormat.format(printDate), new Font(Font.NORMAL, 11, Font.BOLD)));
            table_cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);
            //table_cell6.setBorder(Rectangle.NO_BORDER);
            
            table_cell1.setBorder(com.lowagie.text.Rectangle.NO_BORDER);
            my_report_table1.addCell(table_cell1);
                                 

            //TABLE HEADER
            PdfPTable my_report_table = new PdfPTable(6);
            float[] columnWidths = {0.5f,0.8f,0.8f,0.8f,0.8f,0.8f};
            my_report_table.setWidths(columnWidths);
            my_report_table.setWidthPercentage(100);
            String[] headers1 = new String[]{
                "Name","Roll","Reg", "Session", "Semester","CGPA"
            };

            PdfPTable table1 = new PdfPTable(headers1.length);
            table1.setWidths(columnWidths);
            table1.setWidthPercentage(100);
            for (String header : headers1) {
                PdfPCell cell = new PdfPCell();

                cell.setGrayFill(0.9f);
                cell.setPhrase(new Phrase(header, new Font(Font.NORMAL, 15, Font.BOLD)));
                cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                table1.addCell(cell);
            }
            table1.completeRow();
            
            ////END OF HEADER
            
            ///////////////
            
            PdfPTable my_report_table2 = new PdfPTable(6);
            
            //left side
            PdfPCell table_cell2 = new PdfPCell();
            my_report_table2.setWidthPercentage(100);         
            my_report_table2.setWidths(columnWidths);

            
            ///////////////////
            
              try {

            
            //String sqlQry="Select * from emp_info ORDER BY Emp_ID ASC";
           String Result = "8th Semester";
            String sqlSrch = "SELECT * FROM  eighth_semester_drop WHERE semester='"+Result+"'";

            prepstmnt = con.prepareStatement(sqlSrch);
            res=prepstmnt.executeQuery();
            
            while(res.next())
            {
                
            Name=res.getString("name");  
            table_cell2 = new PdfPCell(new Phrase(Name, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Roll = res.getString("roll");
             table_cell2 = new PdfPCell(new Phrase(Roll, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Reg = res.getString("reg");
             table_cell2 = new PdfPCell(new Phrase(Reg, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            Session = res.getString("session");
            table_cell2 = new PdfPCell(new Phrase(Session, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            Semester = res.getString("semester");
            table_cell2 = new PdfPCell(new Phrase(Semester, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
            CGPA = res.getString("cgpa");
            table_cell2 = new PdfPCell(new Phrase(CGPA, new Font(Font.NORMAL, 15, Font.BOLD)));
            table_cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
            // table_cell1.setBorder(1);           
           // table_cell2.setBorder(Rectangle.NO_BORDER);
            //table_cell1.setBorder(Rectangle.BOX);
            my_report_table2.addCell(table_cell2);
            
            
             
                
               
                
            }
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, e);
            }
           

           ///////////////

            document.add(mainparagraph);
            document.add(paragraph3);
            document.add(my_report_table1);
           
            document.add(paragraph3);
            document.add(table1);
            document.add(my_report_table2);
            
            
           

            // document.add(table);
        } catch (DocumentException | HeadlessException e56) {
            System.err.println(e56.getMessage());
        }

        document.close(); 
     }
    private void jButton117ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton117ActionPerformed
        // TODO add your handling code here:
        
        Object Result = jComboResult.getSelectedItem();
        
        if("1st Semester"==Result)
        {
           try {
               print_First_Semester_Drop();
           } catch (SQLException | BadElementException | IOException ex) {
               Logger.getLogger(Panel_Drop.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        
        if("2nd Semester"==Result)
        {
           try {
               print_Second_Semester_Drop();
           } catch (SQLException | BadElementException | IOException ex) {
               Logger.getLogger(Panel_Drop.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        
        if("3rd Semester"==Result)
        {
           try {
               print_Third_Semester_Drop();
           } catch (SQLException | BadElementException | IOException ex) {
               Logger.getLogger(Panel_Drop.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        
        if("4th Semester"==Result)
        {
           try {
               print_Fourth_Semester_Drop();
           } catch (SQLException | BadElementException | IOException ex) {
               Logger.getLogger(Panel_Drop.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        if("5th Semester"==Result)
        {
           try {
               print_Fifth_Semester_Drop();
           } catch (SQLException | BadElementException | IOException ex) {
               Logger.getLogger(Panel_Drop.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        if("6th Semester"==Result)
        {
           try {
               print_Sixth_Semester_Drop();
           } catch (SQLException | BadElementException | IOException ex) {
               Logger.getLogger(Panel_Drop.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        
        if("7th Semester"==Result)
        {
           try {
               print_Seventh_Semester_Drop();
           } catch (SQLException | BadElementException | IOException ex) {
               Logger.getLogger(Panel_Drop.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        
        if("8th Semester"==Result)
        {
           try {
               print_Eighth_Semester_Drop();
           } catch (SQLException | BadElementException | IOException ex) {
               Logger.getLogger(Panel_Drop.class.getName()).log(Level.SEVERE, null, ex);
           }
        }
        
        
        
        
        
        if (Desktop.isDesktopSupported()) {
            try {
                File myfile = new File("Drop.pdf");

                Desktop.getDesktop().open(myfile);
            } catch (IOException e17) {
                // JOptionPane.showMessageDialog(null, e17.toString());
            }
        }
    }//GEN-LAST:event_jButton117ActionPerformed

    private void jButton107ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton107ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton107ActionPerformed

    private void jButton118ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton118ActionPerformed
        // TODO add your handling code here:
        Refresh();
    }//GEN-LAST:event_jButton118ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton106;
    private javax.swing.JButton jButton107;
    private javax.swing.JButton jButton117;
    private javax.swing.JButton jButton118;
    private javax.swing.JButton jButton119;
    private javax.swing.JButton jButtonUPDATE;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBoxDrop;
    private javax.swing.JComboBox<String> jComboBoxPromotion;
    private javax.swing.JComboBox jComboResult;
    private javax.swing.JComboBox jComboSemester;
    private javax.swing.JComboBox jComboSession;
    private javax.swing.JLabel jLabel122;
    private javax.swing.JLabel jLabel123;
    private javax.swing.JLabel jLabel124;
    private javax.swing.JLabel jLabel125;
    private javax.swing.JLabel jLabel143;
    private javax.swing.JLabel jLabel144;
    private javax.swing.JLabel jLabel145;
    private javax.swing.JLabel jLabel146;
    private javax.swing.JPanel jPanel123;
    private javax.swing.JPanel jPanel126;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel89;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JTable jTableDrop;
    private javax.swing.JTextField txtCGPA;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtReg;
    private javax.swing.JTextField txtRoll;
    // End of variables declaration//GEN-END:variables
}
